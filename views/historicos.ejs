<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mapa</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />

  <script src="https://unpkg.com/leaflet"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
  <style>
    body {
      background-color: white;
      color: rgb(8, 27, 42);
      font-family: Batangas-Regular;
      margin: 0;
      padding: 0;
    }

    .logo-container {
      max-width: 140px;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    .logo-image {
      max-width: 100%;
      height: auto;
    }

    #banner {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: rgb(8, 27, 42);
      padding: 10px;
      margin-bottom: 0px;
      font-size: 20px;
    }

    .button-container {
      text-align: center;
      max-height: 50px;
      /* Altura máxima del contenedor */
      display: flex;
      align-items: center;
    }

    .consult-button {
      background-color: rgb(255, 255, 255);
      max-height: 50px;
      align-items: center;
      border-radius: 10px;
      padding: 1.5vw 3vw;
      font-size: min(5vw, 20px);
      cursor: pointer;
      height: auto;
      /* Altura ajustada automáticamente según el contenido */
      width: auto;
      display: flex;
      /* Convertir el botón en un contenedor flex */
      justify-content: center;
      /* Alinear el contenido horizontalmente al centro */
    }

    .filtrar-button {
      background-color: rgb(191, 210, 224);
      max-height: 50px;
      border-radius: 10px;
      font-size: min(5vw, 20px);
      cursor: pointer;
      height: auto;
      width: auto;
      display: flex;
      justify-content: center;
      /* Alinea horizontalmente el contenido */
      align-items: center;
      /* Alinea verticalmente el contenido */
      margin: auto;
    }

    .filtrar1-button {
      background-color: rgb(8, 27, 42);
      max-height: 50px;
      border-radius: 10px;
      font-size: min(5vw, 20px);
      cursor: pointer;
      height: auto;
      width: auto;
      display: flex;
      justify-content: center;
      /* Alinea horizontalmente el contenido */
      align-items: center;
      /* Alinea verticalmente el contenido */
      margin: 20px;
    }

    .position-container {
      text-align: center;
      color: rgb(4, 20, 32);
      margin-bottom: 20px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }

    #busqueda-container {
      background-color: rgb(191, 210, 224);
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
    }

    #hora-container {
      background-color: rgb(191, 210, 224);
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
      overflow-x: auto;
    }

    .map-container {
      display: flex;
    }

    .left {
      DISPLAY: NONE;
    }

    .right {
      flex: 1;
      margin-left: 10px;
    }

    .table-container {
      display: none;
    }

    #map {
      height: 60vh;
      width: calc(100% - 20px);
      border-radius: 20px;
      border: 3px solid rgb(8, 27, 42);
    }

    #map2 {
      height: 60vh;
      width: calc(100% - 20px);
      border-radius: 20px;
      border: 3px solid rgb(8, 27, 42);
    }

    h1 {
      text-align: center;
      color: rgb(255, 255, 255);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 15px);
    }

    h2 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 2px;
      margin-bottom: 2px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 16px);
    }

    h3 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }

    label {
      text-align: center;
      color: #ffffff;
      margin: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: lighter;
      font-size: 20x;
    }

    #resultados p {
      margin: 10px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      border-spacing: 0;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      overflow: hidden;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }

    table th,
    table td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    table th {
      background-color: rgb(4, 20, 32);
      color: white;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }

    table tbody tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    table tbody tr:hover {
      background-color: #ddd;
    }

    /* Estilo para el contenedor del checkbox */
    #checkBox {
      font-family: Arial, sans-serif;

      /* Cambia la fuente del texto */
      color: #333;
      /* Cambia el color del texto */
    }

    /* Estilo para el texto del checkbox */
    #checkBox label {
      margin: 10px auto;
      font-size: 20px;
      /* Ajusta el margen izquierdo para separar el texto del checkbox */
    }

    #checkBox input[type="checkbox"] {
      margin: 10px auto;
      width: 20px;
      /* Ajusta el ancho de la casilla */
      height: 20px;
      /* Ajusta la altura de la casilla */
    }

    .error-message {
      color: red;
      font-weight: bold;
    }

    .inputs-container {
      background-color: rgb(8, 27, 42);
      border: 1px solid #ccc;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      position: relative;
      display: none;
      flex-direction: row;
      /* Alinear los elementos en fila */
      justify-content: center;
      align-items: center;
      text-align: center;
      /* Alinear el texto horizontalmente */
      border-radius: 20px;
      text-align: center;
      /* Alinea horizontalmente el contenido */
    }

    .select-container {
      background-color: rgb(8, 27, 42);
      border: 1px solid #ccc;
      padding: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      position: relative;
      display: flex;
      flex-direction: row;
      /* Alinear los elementos en fila */
      justify-content: center;
      align-items: center;
      text-align: center;
      /* Alinear el texto horizontalmente */
      border-radius: 20px;
    }

    h4 {
      color: #ffffff;
      margin: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 20px);
      flex: 1;
      max-width: 400px;
      text-align: center;
    }

    .icon-img {
      width: 2em;
      height: auto;
      margin: 0 10px;
      /* Espacio uniforme alrededor de la imagen */
      border-radius: 8px;
    }

    .IDS-content {
      margin: auto;
      display: flex;
      justify-content: flex-start;
      /* Cambiado a flex-start para alinear los elementos al principio */
      align-items: center;
      overflow-x: auto;
      overflow-y: hidden;
      white-space: nowrap;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }


    /* Estilo para ocultar la barra de desplazamiento en WebKit (Chrome, Safari) */
    .IDS-content::-webkit-scrollbar {
      display: none;
    }




    .juan-img {
      width: 200px;
      margin: 20px;
      border-radius: 20px;
      box-shadow: none;
      /* Sombras blancas */
    }

    .sara-img {
      width: 200px;
      margin: 20px;
      border-radius: 20px;
      box-shadow: none;
      /* Sombras blancas */
    }

    .mateo-img {
      width: 200px;
      margin: 20px;
      border-radius: 20px;
      box-shadow: none;
      /* Sombras blancas */
    }

    .selected {
      box-shadow: 0 0 20px rgba(45, 197, 78, 0.8);
    }

    h5 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: lighter;
      font-size: 10x;
    }
  </style>

</head>

<body>
  <div id="banner">
    <div class="logo-container">
      <img src="/views/Media/logo.png" class="logo-image">
    </div>
    <div class="button-container">
      <button class="consult-button" id="buscar-datos">
        <h2>
          SEGUIMIENTO DE VEHÍCULOS
        </h2>
      </button>
    </div>
  </div>
  <div id="busqueda-container">
    <div style="text-align: center; color: rgb(8, 27, 42); margin-bottom: 10px; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif; font-weight: bold; font-size: 20px;">
      BÚSQUEDA DE HISTORICOS POR FECHA Y HORA
    </div>
    <div class="select-container">
      <h4>Mostrar/ Ocultar parámetros de búsqueda</h4>
      <img src="/views/Media/clic.jpeg" alt="Icono" class="icon-img">
    </div>

    <div class="inputs-container">
      <label>Selecciona el vehiculo de interes:</label>
      <div class="IDS-content">
        <img src="/views/Media/juan.jpg" class="juan-img" onclick="selectImage('juan')">
        <img src="/views/Media/sara.jpg" class="sara-img" onclick="selectImage('sara')">
        <img src="/views/Media/mateo.jpg" class="mateo-img" onclick="selectImage('mateo')">

      </div>
      <label>Desliza para ver los demás vehiculos</label>

      <div>
        <label for="fecha-inicio">Fecha de inicio:</label>
        <input type="date" id="fecha-inicio" name="fecha-inicio" min="2024-03-01" max="2025-12-31"><br><br>
        <label for="fecha-fin">Fecha de fin:</label>
        <input type="date" id="fecha-fin" name="fecha-fin" min="2024-03-01" max="2025-12-31"><br><br>
      </div>
      <div id="checkBox">
        <label for="buscar-por-hora">
          <input type="checkbox" id="buscar-por-hora"> Filtrar por hora
        </label>
      </div>

      <!-- Modificamos el contenedor de las horas para aceptar formato de 24 horas -->
      <div id="hora-container" style="display: none;">
        <h5 for="hora-inicio" id="label-hora-inicio">Hora de inicio:</h5>
        <input type="time" id="hora-inicio" style="width: 150px;" step="1">
        <h5 for="hora-fin" id="label-hora-fin">Hora de fin:</h5>
        <input type="time" id="hora-fin" style="width: 150px;" step="1">
      </div>


      <div>
        <div class="button-container">
          <button class="filtrar-button" id="filtrar-time-button">
            <h2>Filtrar Por Tiempo</h2>
          </button>
        </div>
      </div>

    </div>

    <div class="map-container">
      <div class="left">
        <div class="table-container">
          <table id="resultados">
            <thead>
              <tr>
                <th>Usuario</th>
                <th>Latitud</th>
                <th>Longitud</th>
                <th>Fecha</th>
                <th>Hora</th>
              </tr>
            </thead>
            <tbody>
              <!-- Aquí se agregarán las filas de resultados -->
            </tbody>
          </table>
        </div>
      </div>
      <div class="right">
        <div id="map"></div>
      </div>
    </div>
  </div>

  <script>
    //////////////////////////////////////////////////////-----------PARAMETROS---------------///////////////
    function toggleInputsContainer() {
      var inputsContainer = document.querySelector(".inputs-container");
      if (inputsContainer.style.display === "none" || inputsContainer.style.display === "") {
        inputsContainer.style.display = "block";
      } else {
        inputsContainer.style.display = "none";
      }
    }
    // Asociar la función al contenedor con clase "select-container"
    document.querySelector(".select-container").addEventListener("click", toggleInputsContainer);
    ////////////////////////////////////////////-------------SELECTOR DE IMAEGN-----------------///////////////////////////////////////////
    let selectedImageID = null; // Variable para almacenar el ID de la imagen seleccionada

    function selectImage(id) {
      // Eliminar la clase 'selected' de todas las imágenes
      const images = document.querySelectorAll('.IDS-content img');
      images.forEach(img => img.classList.remove('selected'));

      // Agregar la clase 'selected' a la imagen seleccionada
      const selectedImg = document.querySelector(`.${id}-img`);
      selectedImg.classList.add('selected');

      // Asignar el ID de la imagen seleccionada a la variable 'selectedImageID'
      selectedImageID = id;

      // Actualizar el contenido del elemento <span> con el ID "selectedImageID"
      const selectedImageIDElement = document.getElementById('selectedImageID');
      selectedImageIDElement.textContent = selectedImageID;
    }
    ///////////////////////////////////////////------ CALENDARIOS-----////////////////////////////
    var fechaInicioInput = document.getElementById('fecha-inicio');
    var fechaFinInput = document.getElementById('fecha-fin');
    var horaInicioInput = document.getElementById('hora-inicio');
    var horaFinInput = document.getElementById('hora-fin');

    // Cuando se cambia el valor del campo de fecha de inicio
    fechaInicioInput.addEventListener('change', function() {
      // Establecer el valor mínimo del campo de fecha de fin como el valor seleccionado en el campo de fecha de inicio
      fechaFinInput.min = fechaInicioInput.value;

      // Obtener las fechas como objetos Date para compararlas
      var fechaInicio = new Date(fechaInicioInput.value);
      var fechaFin = new Date(fechaFinInput.value);

      // Verificar si la fecha de fin es menor que la fecha de inicio
      if (fechaFin < fechaInicio) {
        // Mostrar mensaje de error al usuario
        alert('Rango de fecha incorrecto: La fecha de fin no puede ser anterior a la fecha de inicio.');
        // También podrías mostrar el mensaje de error en algún elemento HTML en lugar de usar alert
        // document.getElementById('mensaje-error').innerText = 'Rango de fecha incorrecto: La fecha de fin no puede ser anterior a la fecha de inicio.';
        // Y luego estilizar ese elemento para que sea más visible para el usuario
      }
    });

    var map;

    function initMap() {
      // Asignar el mapa a la variable global map
      map = L.map('map').setView([10.8941, -74.8041], 13);
      var currentMarker = null;

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
    }

    initMap();

    document.getElementById('buscar-datos').addEventListener('click', function() {
      //window.location.href = 'http://localhost:3000/';
      var currentLocation = window.location.href;
      var url = currentLocation.substring(0, currentLocation.lastIndexOf('/') + 1);
      window.location.href = url;
    });

    // Asignar a las variables los elementos del DOM
    const buscarPorHoraCheckbox = document.getElementById('buscar-por-hora');
    const horaContainer = document.getElementById('hora-container');
    const labelHoraInicio = document.getElementById('label-hora-inicio');
    const labelHoraFin = document.getElementById('label-hora-fin');

    // Variables de estado para el tipo de búsqueda
    let buscarPorHora = false; // Por defecto, no buscará por hora

    // Evento change del checkbox de búsqueda por hora
    buscarPorHoraCheckbox.addEventListener('change', function() {
      buscarPorHora = buscarPorHoraCheckbox.checked;
      // Dependiendo de si se marca o desmarca, mostrar u ocultar los campos de hora
      if (buscarPorHora) {
        horaContainer.style.display = 'block';
        labelHoraInicio.style.display = 'inline-block';
        labelHoraFin.style.display = 'inline-block';
      } else {
        horaContainer.style.display = 'none';
        labelHoraInicio.style.display = 'none';
        labelHoraFin.style.display = 'none';
      }
    });

    // Función para enviar la solicitud de filtrado por fecha y hora
    function filtrarPorFechaYHora() {
      // Obtener los valores de los campos de fecha y hora
      const fechaInicio = document.getElementById('fecha-inicio').value;
      const fechaFin = document.getElementById('fecha-fin').value;
      let horaInicio = '00:00:00'; // Valor inicial de hora de inicio con segundos
      let horaFin = '23:59:59'; // Valor inicial de hora de fin con segundos

      // Verificar si se busca por hora
      const buscarPorHora = document.getElementById('buscar-por-hora').checked;

      // Si se busca por hora, obtener los valores de hora introducidos por el usuario
      if (buscarPorHora) {
        horaInicio = document.getElementById('hora-inicio').value; // + ':00'; // Agregar segundos
        horaFin = document.getElementById('hora-fin').value; //+ ':59'; // Agregar segundos
      }

      // Verificar si se han seleccionado las fechas
      if (fechaInicioInput.value === '' || fechaFinInput.value === '') {
        // Mostrar mensaje de error al usuario
        alert('Por favor, seleccione las fechas de inicio y fin.');
        return ; // Detener la ejecución si las fechas no están seleccionadas
      }

      // Verificar si la fecha de fin es menor que la fecha de inicio
      if (fechaFin < fechaInicio) {
        // Mostrar mensaje de error al usuario
        alert('Rango de fecha incorrecto: La fecha de fin no puede ser anterior a la fecha de inicio.');
        return ;
      }
      

      // Hacer la petición al servidor con los parámetros correspondientes
      fetch(`/filtrar-por-fechas?fechaInicio=${fechaInicio}&fechaFin=${fechaFin}&horaInicio=${horaInicio}&horaFin=${horaFin}`)
        .then(response => response.json())
        .then(data => {
          // Llamar a la función para mostrar los resultados en la tabla
          mostrarResultadosEnTabla(data);

          // Crear una matriz de coordenadas para los marcadores en el mapa
          const coordenadas = [];

          // Iterar sobre las filas de resultados
          data.forEach(result => {
            const latitud = result.latitud; // Obtener la latitud
            const longitud = result.longitud; // Obtener la longitud
            const fecha = result.fecha;
            const hora = result.hora;
            coordenadas.push([parseFloat(latitud), parseFloat(longitud), fecha, hora]); // Agregar las coordenadas como un par [latitud, longitud]
          });

          // Llamar a la función para mostrar los resultados en el mapa
          mostrarResultadosEnMapa(coordenadas);
        })
        .catch(error => console.error('Error:', error));
    }

    // Evento click del botón de filtrar
    document.getElementById('filtrar-time-button').addEventListener('click', function() {
      filtrarPorFechaYHora(); // Llamar a la función para filtrar por fecha y hora cuando se hace clic en el botón
    });

    // Función para mostrar los resultados en la tabla
    function mostrarResultadosEnTabla(data) {
      const resultadosTbody = document.querySelector('#resultados tbody');
      resultadosTbody.innerHTML = ''; // Limpiar resultados anteriores

      if (data.length === 0) {
        // Si no hay resultados, mostrar un mensaje indicando que no hay información disponible
        const noDataMessage = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '5'); // Column span para ocupar todas las columnas
        messageCell.textContent = 'No hay información disponible para la fecha solicitada.';
        noDataMessage.appendChild(messageCell);
        resultadosTbody.appendChild(noDataMessage);
      } else {
        // Mostrar los resultados en filas de la tabla
        data.forEach(result => {
          const row = document.createElement('tr');
          const usuarioCell = document.createElement('td');
          const latitudCell = document.createElement('td');
          const longitudCell = document.createElement('td');
          const fechaCell = document.createElement('td');
          const horaCell = document.createElement('td');

          usuarioCell.textContent = result.usuario; // Obtener el usuario del resultado
          latitudCell.textContent = result.latitud;
          longitudCell.textContent = result.longitud;
          fechaCell.textContent = result.fecha;
          horaCell.textContent = result.hora;

          row.appendChild(usuarioCell);
          row.appendChild(latitudCell);
          row.appendChild(longitudCell);
          row.appendChild(fechaCell);
          row.appendChild(horaCell);

          resultadosTbody.appendChild(row);
        });
      }
    }

    // Función para mostrar los resultados en el mapa
    function mostrarResultadosEnMapa(coordenadas) {

      // Limpiar polilíneas anteriores
      map.eachLayer(function(layer) {
        if (layer instanceof L.Polyline) {
          map.removeLayer(layer);
        }
      });

      // Limpiar marcadores anteriores
      map.eachLayer(function(layer) {
        if (layer instanceof L.Marker) {
          map.removeLayer(layer);
        }
      });

      const polylinePoints = coordenadas.map(coordenada => [coordenada[0], coordenada[1]]);
      const polyline = L.polyline(polylinePoints, {
        color: 'red'
      }).addTo(map);

      const startMarker = L.marker([coordenadas[0][0], coordenadas[0][1]]).addTo(map);
      const endMarker = L.marker([coordenadas[coordenadas.length - 1][0], coordenadas[coordenadas.length - 1][1]]).addTo(map);

      // Crear contenido para los popups de los marcadores
      const startMarkerPopupContent = `Inicio del recorrido:<br>Latitud: ${coordenadas[0][0]}, Longitud: ${coordenadas[0][1]}<br>Fecha: ${coordenadas[0][2]}<br>Hora: ${coordenadas[0][3]}`;
      const endMarkerPopupContent = `Fin del recorrido:<br>Latitud: ${coordenadas[coordenadas.length - 1][0]}, Longitud: ${coordenadas[coordenadas.length - 1][1]}<br>Fecha: ${coordenadas[coordenadas.length - 1][2]}<br>Hora: ${coordenadas[coordenadas.length - 1][3]}`;

      // Agregar popups a los marcadores
      startMarker.bindPopup(startMarkerPopupContent);
      endMarker.bindPopup(endMarkerPopupContent);

      // Evento de clic en el marcador de inicio
      startMarker.on('click', function(e) {
        startMarker.openPopup();
      });

      // Evento de clic en el marcador de fin
      endMarker.on('click', function(e) {
        endMarker.openPopup();
      });

      const bounds = L.latLngBounds(polylinePoints);
      bounds.extend(startMarker.getLatLng());
      bounds.extend(endMarker.getLatLng());

      // Ajustar la vista del mapa para mostrar toda la polilínea y los marcadores
      map.fitBounds(bounds);

    }
  </script>


  <!---------------------------------------------------------SEGUNDA PARTE DE LA BUSQUEDA------------------------------------------------->

  <div id="busqueda-container">
    <div style="text-align: center; color: rgb(4, 20, 32); margin-bottom: 20px; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif; font-weight: bold; font-size: 30px;">
      BÚSQUEDA DE HISTORICOS POR AREA
    </div>
    <div>
      <label>Centro seleccionado: <span id="Centro"></span></label>
    </div>

    <div>
      <label>Radio seleccionado: <span id="Radio"></span></label>
    </div>

    <div>
      <button class="consult-button" id="filtrar1-button">Filtrar Por Area</button>
    </div>

    <script>
      var drawnItems = L.featureGroup().addTo(map);

      var drawControl = new L.Control.Draw({
        draw: {
          circle: true,
          marker: false,
          polygon: false,
          polyline: false,
          rectangle: false,
        },
        edit: {
          featureGroup: drawnItems
        }
      });
      map.addControl(drawControl);

      map.on(L.Draw.Event.CREATED, function(e) {
        var layer = e.layer;
        drawnItems.addLayer(layer);

        // Obtener las coordenadas del círculo dibujado
        var latLng = layer.getLatLng();

        var radius = layer.getRadius() / 1000;

        var circleInfo = document.getElementById('circle-info');
        // Mostrar las variables en los elementos del DOM
        document.getElementById('Centro').textContent = `Latitud: ${latLng.lat}, Longitud: ${latLng.lng}`;
        document.getElementById('Radio').textContent = `${radius} km`;
      });

      function filtrarPorArea() {
        // Obtener las coordenadas del centro y el radio
        const latLngLat = parseFloat(document.getElementById('Centro').textContent.split(':')[1].trim()); // Extraer la latitud del centro
        const latLngLng = parseFloat(document.getElementById('Centro').textContent.split(':')[2].trim()); // Extraer la longitud del centro
        const radius = parseFloat(document.getElementById('Radio').textContent.split(' ')[0]); // Extraer el radio y convertirlo a número
        console.log(`Latitud: ${latLngLat}, Longitud: ${latLngLng}, Radio: ${radius}`);

        // Crear una nueva matriz para almacenar los datos filtrados
        const DatosFiltrados = [];

        // Obtener todas las filas de la tabla
        const filas = document.querySelectorAll('#resultados tbody tr');

        // Iterar sobre cada fila de la tabla
        filas.forEach(fila => {
          let radioDato;
          let latitudDato; // Definir latitudDato fuera del bloque condicional
          let longitudDato; // Definir longitudDato fuera del bloque condicional
          const datosFila = []; // Crear una matriz para almacenar los datos de cada fila

          // Obtener los datos de cada celda de la fila y agregarlos a la matriz de datos de la fila
          fila.querySelectorAll('td').forEach((celda, index) => {
            datosFila.push(celda.textContent);
            // Si es la celda de latitud, obtener su valor
            if (index === 1) {
              latitudDato = parseFloat(celda.textContent);
            }
            // Si es la celda de longitud, obtener su valor
            if (index === 2) {
              longitudDato = parseFloat(celda.textContent); // Corregir esta línea
              console.log(latitudDato, longitudDato);
              // Calcular la distancia euclidiana
              let radioDato = 0;

              function calcularDistancia(latitudDato, longitudDato, latLngLat, latLngLng) {
                // Convertir las coordenadas de grados a radianes
                const latitudDatoRad = latitudDato * Math.PI / 180;
                const longitudDatoRad = longitudDato * Math.PI / 180;
                const latLngLatRad = latLngLat * Math.PI / 180;
                const latLngLngRad = latLngLng * Math.PI / 180;

                // Calcular las diferencias en latitud y longitud
                const deltaLat = latitudDatoRad - latLngLatRad;
                const deltaLng = longitudDatoRad - latLngLngRad;

                // Aplicar la fórmula de Haversine
                const R = 6371; // Radio de la Tierra en kilómetros
                const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
                  Math.cos(latLngLatRad) * Math.cos(latitudDatoRad) *
                  Math.sin(deltaLng / 2) * Math.sin(deltaLng / 2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                const distancia = R * c; // Distancia en kilómetros
                // Convertir la distancia a metros
                radioDato = distancia;
              }
              // Llamar a la función para calcular la distancia
              calcularDistancia(latitudDato, longitudDato, latLngLat, latLngLng);
              console.log("RadioDato:", radioDato, latitudDato, longitudDato); // Imprimir en consola el valor de radioDato
              // Verificar si la distancia es menor o igual al radio y si es así, almacenar el dato
              if (radioDato <= radius) {
                DatosFiltrados.push(datosFila);
              }
            }
          });
        });
        console.log("Datos Filtrados:", DatosFiltrados);
        mostrarResultadosEnTabla1(DatosFiltrados);
        // Llamar a la función para mostrar los resultados en el mapa
        mostrarResultadosEnMapa1(DatosFiltrados);
      }
      // Definición de la función para mostrar los resultados en la tabla
      function mostrarResultadosEnTabla1(data) {
        const resultadosTbody = document.querySelector('#resultados1 tbody');
        resultadosTbody.innerHTML = ''; // Limpiar resultados anteriores

        if (data.length === 0) {
          // Si no hay resultados, mostrar un mensaje indicando que no hay información disponible
          const noDataMessage = document.createElement('tr');
          const messageCell = document.createElement('td');
          messageCell.setAttribute('colspan', '5'); // Column span para ocupar todas las columnas
          messageCell.textContent = 'No hay información disponible para la fecha solicitada.';
          noDataMessage.appendChild(messageCell);
          resultadosTbody.appendChild(noDataMessage);
        } else {
          // Mostrar los resultados en filas de la tabla
          data.forEach(result => {
            const row = document.createElement('tr');
            result.forEach(dato => {
              const cell = document.createElement('td');
              cell.textContent = dato;
              row.appendChild(cell);
            });
            resultadosTbody.appendChild(row);
          });
        }
      }

      function mostrarResultadosEnMapa1(DatosFiltrados) {


        // Crear arreglo para almacenar coordenadas de la polilínea
        const polylinePoints = DatosFiltrados.map(coordenada => [parseFloat(coordenada[1]), parseFloat(coordenada[2])]);

        const polyline = L.polyline(polylinePoints, {
          color: 'red'
        }).addTo(drawnItems);

        //const startMarker = L.marker(polylinePoints[0]).addTo(drawnItems);


        //====== MARCADORES DE INICIO Y FIN ====

        const inicioFinIcon = L.icon({
          iconUrl: 'start.png', // Ruta de la imagen del icono personalizado
          iconSize: [38, 38], // Tamaño del icono
          iconAnchor: [16, 16], // Punto de anclaje del icono
          popupAnchor: [0, -10] // Punto de anclaje del popup relativo al icono
        });

        const FinIcon = L.icon({
          iconUrl: 'end.png', // Ruta de la imagen del icono personalizado
          iconSize: [38, 38], // Tamaño del icono
          iconAnchor: [16, 16], // Punto de anclaje del icono
          popupAnchor: [0, -10] // Punto de anclaje del popup relativo al icono
        });

        const startMarker = L.marker(polylinePoints[0], {
          icon: inicioFinIcon
        }).addTo(drawnItems);
        const endMarker = L.marker(polylinePoints[polylinePoints.length - 1], {
          icon: FinIcon
        }).addTo(drawnItems);

        //======================================



        // Crear contenido para los popups de los marcadores
        const startMarkerPopupContent = `Inicio del recorrido:<br>Latitud: ${polylinePoints[0][0]}, Longitud: ${polylinePoints[0][1]}<br>Fecha: ${DatosFiltrados[0][3]}<br>Hora: ${DatosFiltrados[0][4]}`;
        const endMarkerPopupContent = `Fin del recorrido:<br>Latitud: ${polylinePoints[polylinePoints.length - 1][0]}, Longitud: ${polylinePoints[polylinePoints.length - 1][1]}<br>Fecha: ${DatosFiltrados[DatosFiltrados.length - 1][3]}<br>Hora: ${DatosFiltrados[DatosFiltrados.length - 1][4]}`;

        // Agregar popups a los marcadores
        startMarker.bindPopup(startMarkerPopupContent);
        endMarker.bindPopup(endMarkerPopupContent);

        //-------------- VARIOS MARCADORES --------------------

        const simplePoints = [];
        DatosFiltrados.forEach(coordenada => {
          const latLng = L.latLng(parseFloat(coordenada[1]), parseFloat(coordenada[2]));
          const simplePoint = L.circleMarker(latLng, {
            radius: 4, // Radio muy pequeño para que se vea como un punto
            color: 'blue', // Color del punto
            fillColor: 'red', // Color de relleno del punto
            fillOpacity: 1 // Opacidad del relleno del punto
          }).addTo(drawnItems);


          simplePoints.push(simplePoint);


          const popupContent = `Fecha: ${coordenada[3]}<br>Hora: ${coordenada[4]}`;

          // Vincular evento de clic al punto para mostrar el popup
          simplePoint.on('click', function(event) {
            simplePoint.bindPopup(popupContent).openPopup();
          });

          simplePoints.push(simplePoint);
        });


        //-----------------------------------------------------

        // Evento de clic en el marcador de inicio
        startMarker.on('click', function(e) {
          startMarker.openPopup();
        });

        // Evento de clic en el marcador de fin
        endMarker.on('click', function(e) {
          endMarker.openPopup();
        });

        const bounds = L.latLngBounds(polylinePoints);
        bounds.extend(startMarker.getLatLng());
        bounds.extend(endMarker.getLatLng());

        // Ajustar la vista del mapa para mostrar toda la polilínea y los marcadores
        map.fitBounds(bounds);


        //=============
        circleMarkers.forEach(circleMarker => {
          bounds.extend(circleMarker.getLatLng());
        });

        // Ajustar la vista del mapa para mostrar toda la polilínea y los marcadores circulares
        map.fitBounds(bounds);



      }



      // Evento click del botón de filtrar
      document.getElementById('filtrar1-button').addEventListener('click', function() {
        filtrarPorArea(); // Llamar a la función para filtrar por área cuando se hace clic en el botón
      });
    </script>

    <div class="table-container">
      <table id="resultados1">
        <thead>
          <tr>
            <th>Usuario</th>
            <th>Latitud</th>
            <th>Longitud</th>
            <th>Fecha</th>
            <th>Hora</th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se agregarán las filas de resultados -->
        </tbody>
      </table>
    </div>
  </div>
</body>

</html>