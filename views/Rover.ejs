<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ROVER</title>
  <!-- Importar Three.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <style>
    body {
      background-color: white;
      color: rgb(8, 27, 42);
      font-family: Batangas-Regular;
      margin: 0;
      padding: 0;
    }

    .logo-container {
      max-width: 140px;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    .logo-image {
      max-width: 100%;
      height: auto;
    }

    #banner {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: rgb(8, 27, 42);
      padding: 10px;
      margin-bottom: 0px;
      font-size: 20px;
    }

    .button-container {
      text-align: center;
      max-height: 50px;
      /* Altura máxima del contenedor */
      display: flex;
      align-items: center;
    }

    .consult-button {
      background-color: rgb(255, 255, 255);
      max-height: 50px;
      align-items: center;
      border-radius: 10px;
      padding: 1vw;
      font-size: min(5vw, 20px);
      cursor: pointer;
      height: auto;
      /* Altura ajustada automáticamente según el contenido */
      width: auto;
      display: flex;
      /* Convertir el botón en un contenedor flex */
      justify-content: center;
      /* Alinear el contenido horizontalmente al centro */
    }

    .position-container {
      text-align: center;
      align-items: center;
      color: rgb(4, 20, 32);
      margin-bottom: 20px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }


    #content-container {
      background-color: rgb(191, 210, 224);
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
      overflow-x: auto;
      height: 100%;
      /* La altura será igual al 100% del viewport */
      max-height: 900px;
    }

    #object-container {
      background-color: blanchedalmond;
      border-radius: 20px;
      border-width: 2px;
      border-color: black;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
      overflow-x: auto;
      height: 100%;
      /* La altura será igual al 100% del viewport */
      max-height: 900px;
    }

    #Render-container {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 80vw;
      /* Ancho relativo al 80% del ancho de la ventana del navegador */
      height: 80vh;
      /* Alto relativo al 80% de la altura de la ventana del navegador */
      max-width: 800px;
      /* Ancho máximo de 800px para mantener la proporción */
      max-height: 800px;
      /* Alto máximo de 800px para mantener la proporción */
      background-color: #f0f0f0;
      /* Color de fondo */
      border: 2px solid #ccc;
      /* Borde sólido de 2px de grosor y color gris claro */
      border-radius: 10px;
      /* Borde redondeado con un radio de 10px */
      overflow: hidden;
      /* Oculta cualquier contenido que exceda el tamaño del contenedor */
      display: flex;
      /* Convertir el botón en un contenedor flex */
      justify-content: center;
      align-items: center;
      /* Alinear el contenido horizontalmente al centro */
    }

    #animacion3d {
      width: 100%;
      /* Ancho del 100% del contenedor */
      height: 100%;
      /* Alto del 100% del contenedor */
    }


    h1 {
      text-align: center;
      color: rgb(255, 255, 255);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 15px);
    }

    h2 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 2px;
      margin-bottom: 2px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 16px);
    }

    h3 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }
  </style>
</head>

<body>
  <div id="banner">
    <div class="logo-container">
      <img src="/views/Media/logo.png" class="logo-image">
    </div>
    <div class="button-container">
      <button class="consult-button" id="gps">
        <h2>POSICIÓN GPS</h2>

      </button>
    </div>
    <div class="button-container">
      <button class="consult-button" id="historicos">
        <h2>CONSULTA DE HISTORICOS</h2>
      </button>
    </div>
  </div>

  <div id="content-container">
    <div class="position-container">
      <h3>¡Bienvenidos!</h3>
      <h2>En esta web encontrarán datos del rover, tales como su orientación en tiempo real, su posición satelital y podrás consular donde ha estado. </h2>
      <div class="Render-container">
        <div id="animacion3d"></div>
      </div>
    </div>
  </div>
  </div>
  <script>
    // Variables para controlar la orientación del cubo
    var rotationX = 0;
    var rotationY = 0;
    var rotationZ = 0;

    // Crea una escena
    var scene = new THREE.Scene();

    // Crea una cámara
    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    // Crea un renderizador
    var renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth * 0.7, window.innerHeight * 0.7);
    document.getElementById('animacion3d').appendChild(renderer.domElement);

    // Crea un cubo
    var geometry = new THREE.BoxGeometry();
    var material = new THREE.MeshBasicMaterial({
      color: 0x00ff00
    });
    var cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    // Función para actualizar la orientación del cubo
    function updateCubeRotation() {
      fetch('/latest-data') // Realizar solicitud al servidor para obtener los últimos datos
        .then(response => response.json())
        .then(data => {
          // Verificar si los datos de orientación están presentes y asignarlos a las variables de rotación
          if (data && data.yaw !== undefined && data.pitch !== undefined && data.roll !== undefined) {
            rotationX = data.pitch;
            rotationY = data.yaw;
            rotationZ = data.roll;

            // Actualizar la rotación del cubo
            cube.rotation.x = rotationX;
            cube.rotation.y = rotationY;
            cube.rotation.z = rotationZ;
          } else {
            // Si los datos de orientación no están presentes, dejar la rotación del cubo en cero
            cube.rotation.set(0, 0, 0);
          }
        })
        .catch(error => {
          console.error('Error al obtener los datos de orientación:', error);
          // Si hay un error al obtener los datos, dejar la rotación del cubo en cero
          cube.rotation.set(0, 0, 0);
        });
    }

    // Función para renderizar la escena
    function render() {
      requestAnimationFrame(render);
      updateCubeRotation();
      renderer.render(scene, camera);
    }

    // Inicia la renderización
    render();

    document.getElementById('historicos').addEventListener('click', function() {
      var currentLocation = window.location.href;
      var url = currentLocation.substring(0, currentLocation.lastIndexOf('/') + 1) + 'historicos';
      window.location.href = url;
    });

    document.getElementById('gps').addEventListener('click', function() {
      var currentLocation = window.location.href;
      var url = currentLocation.substring(0, currentLocation.lastIndexOf('/') + 1) + 'ubicacion';
      window.location.href = url;
    });
  </script>
</body>

</html>