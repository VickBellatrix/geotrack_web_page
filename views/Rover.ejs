<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ROVER</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script type="module" src="https://unpkg.com/@splinetool/viewer@1.3.8/build/spline-viewer.js"></script>

  <style>
    body {
      background-color: white;
      color: rgb(8, 27, 42);
      font-family: Batangas-Regular;
      margin: 0;
      padding: 0;
    }

    .logo-container {
      max-width: 140px;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    .logo-image {
      max-width: 100%;
      height: auto;
    }

    #banner {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: rgb(8, 27, 42);
      padding: 10px;
      margin-bottom: 0px;
      font-size: 20px;
    }

    .button-container {
      text-align: center;
      max-height: 50px;
      /* Altura máxima del contenedor */
      display: flex;
      align-items: center;
    }

    .consult-button {
      background-color: rgb(255, 255, 255);
      max-height: 50px;
      align-items: center;
      border-radius: 10px;
      padding: 1vw;
      font-size: min(5vw, 20px);
      cursor: pointer;
      height: auto;
      /* Altura ajustada automáticamente según el contenido */
      width: auto;
      display: flex;
      /* Convertir el botón en un contenedor flex */
      justify-content: center;
      /* Alinear el contenido horizontalmente al centro */
    }

    .position-container {
      text-align: center;
      align-items: center;
      color: rgb(4, 20, 32);
      margin-bottom: 20px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }


    #content-container {
      background-color: rgb(191, 210, 224);
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
      overflow-x: auto;
      height: 100%;
      /* La altura será igual al 100% del viewport */
      max-height: 900px;
    }

    #object-container {
      background-color: blanchedalmond;
      border-radius: 20px;
      border-width: 2px;
      border-color: black;
      padding: 20px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      width: calc(100vw - 100px);
      max-width: calc(100% - 40px);
      text-align: center;
      margin: 10px auto;
      overflow-x: auto;
      height: 100%;
      /* La altura será igual al 100% del viewport */
      max-height: 900px;
    }

    #Render-container {
      width: 100%;
      /* Ajuste el ancho al 100% */
      background-color: #f0f0f0;
      border: 2px solid #ccc;
      border-radius: 10px;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #animacion3d {
      width: 100%;
      height: calc(100vh - 300px);
      /* Ajusta la altura para ocupar el espacio restante debajo del texto */
      display: block;
    }y


    h1 {
      text-align: center;
      color: rgb(255, 255, 255);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 15px);
    }

    h2 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 2px;
      margin-bottom: 2px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: min(5vw, 16px);
    }

    h3 {
      text-align: center;
      color: rgb(8, 27, 42);
      margin-top: 5px;
      margin-bottom: 5px;
      font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
      font-weight: bold;
      font-size: 30px;
    }
  </style>
</head>

<body>
  <div id="banner">
    <div class="logo-container">
      <img src="/views/Media/logo.png" class="logo-image">
    </div>
    <div class="button-container">
      <button class="consult-button" id="gps">
        <h2>POSICIÓN GPS</h2>

      </button>
    </div>
    <div class="button-container">
      <button class="consult-button" id="historicos">
        <h2>CONSULTA DE HISTORICOS</h2>
      </button>
    </div>
  </div>

  <div id="content-container">
    <div class="position-container">
      <h3>¡Bienvenidos!</h3>
      <h2>En esta web encontrarán datos del rover, tales como su orientación en tiempo real, su posición satelital y podrás consular donde ha estado. </h2>
      <div id="Render-container">
        <div id="animacion3d">
<spline-viewer url="https://prod.spline.design/fXMPQk0dnAZKKvhd/scene.splinecode"></spline-viewer>
        </div>
      </div>
    </div>
  </div>
  <script>

    // Crear la cámara
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 0, 5);

    // Crear la escena
    const scene = new THREE.Scene();

    // Cargar el objeto 3D desde Spline
    const loader = new SplineLoader();
    loader.load(
      'https://prod.spline.design/fXMPQk0dnAZKKvhd/scene.splinecode',
      (splineScene) => {
        scene.add(splineScene);
      }
    );

    function updateRoverPosition(positionData) {
  splineScene.rotation.x = positionData.x;
  splineScene.rotation.y = positionData.y;
  splineScene.rotation.z = positionData.z;
}

function updateRoverRotation() {
  fetch('/latest-data') // Realizar solicitud al servidor para obtener los últimos datos
    .then(response => response.json())
    .then(data => {
      // Verify if orientation data is present
      if (data && data.yaw !== undefined && data.pitch !== undefined && data.roll !== undefined) {
        positionData.x = data.pitch;
        positionData.y = data.yaw;
        positionData.z = data.roll;
        updateRoverPosition(positionData); // Call update function here
      } else {
        // Handle missing data (e.g., display error message)
        console.warn('Orientation data not found in response');
      }
    })
    .catch(error => {
      console.error('Error al obtener los datos de orientación:', error);
      // Handle data fetching errors (e.g., display error message or use defaults)
    });
}

    // Crear el renderizador
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('animacion3d').appendChild(renderer.domElement);

    // Configurar las sombras
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFShadowMap;

    scene.background = new THREE.Color('#2d2e32');
    renderer.setClearAlpha(1);

    // Configurar los controles de órbita
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.125;

    // Ajustar la ventana al redimensionar
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // Función de animación
    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();
  </script>

<script>
document.getElementById('historicos').addEventListener('click', function() {
  var currentLocation = window.location.href;
  var url = currentLocation.substring(0, currentLocation.lastIndexOf('/') + 1) + 'historicos';
  window.location.href = url;
});

document.getElementById('gps').addEventListener('click', function() {
  var currentLocation = window.location.href;
  var url = currentLocation.substring(0, currentLocation.lastIndexOf('/') + 1) + 'ubicacion';
  window.location.href = url;
});
</script>

</body>

</html>
